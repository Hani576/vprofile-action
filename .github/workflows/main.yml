name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-repo
  EKS_CLUSTER_NAME: my-eks-1



jobs:
  Testing:
   runs-on: ubuntu-latest
   steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Maven test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle


      - name: set java 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          

      - name: setup sonarQube
        uses: warchant/setup-sonar-scanner@v7


       # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.sources=src/
          -Dsonar.junit.reportsPath=target/surefire-reports/ 
          -Dsonar.jacoco.reportsPath=target/jacoco.exec 
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/



          # Check the Quality Gate status.
      #- name: SonarQube Quality Gate check
      #  id: sonarqube-quality-gate-check
       # uses: sonarsource/sonarqube-quality-gate-action@master
       # timeout-minutes: 5
       # env:
       #   sonar-host: ${{ secrets.SONAR_URL }}
        #  sonar-token: ${{ secrets.SONAR_TOKEN }}


  Build_AND_Publish:
   needs: Testing
   runs-on: ubuntu-latest
   steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: upload image to ECR
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.REGISTRY }}
        repo: ${{ env.ECR_REPOSITORY }}
        region: ${{ env.AWS_REGION }}
        tags: latest,${{ github.run_number }}
        daemon_off: false
        dockerfile: ./Dockerfile
        context: ./

  DeployToEKS:
   needs: Build_AND_Publish
   runs-on: ubuntu-latest
   steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: get kube config file
      run: aws eks update-kubeconfig --region ${{env.AWS_REGION}} --name ${{ env.EKS_CLUSTER_NAME }} 
      

    - name: print config file 
      run: cat ~/.kube/config


    #- name: login into ECR 
     # run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password="$(aws ecr get-login-password)" 
     
    - name: deploy helm
      uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        cluster-name: ${{ env.EKS_CLUSTER_NAME }}
        helm-chart: ./helm/vprofilecharts
        
        namespace: default
        values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }} 
        name: vprofile-stack
          